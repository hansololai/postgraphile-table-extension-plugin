// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with the filter plugin 1`] = `
"\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

type ForwardUserInfo implements Node {
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  phone: String

  \\"\\"\\"Reads a single \`User\` that is related to this \`ForwardUserInfo\`.\\"\\"\\"
  userByForwardUserInfoId: User
}

\\"\\"\\"
A condition to be used against \`ForwardUserInfo\` object types. All fields are
tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input ForwardUserInfoCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`phone\` field.\\"\\"\\"
  phone: String
}

\\"\\"\\"A connection to a list of \`ForwardUserInfo\` values.\\"\\"\\"
type ForwardUserInfosConnection {
  \\"\\"\\"
  A list of edges which contains the \`ForwardUserInfo\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ForwardUserInfosEdge!]!

  \\"\\"\\"A list of \`ForwardUserInfo\` objects.\\"\\"\\"
  nodes: [ForwardUserInfo]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"
  The count of *all* \`ForwardUserInfo\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`ForwardUserInfo\` edge in the connection.\\"\\"\\"
type ForwardUserInfosEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`ForwardUserInfo\` at the end of the edge.\\"\\"\\"
  node: ForwardUserInfo
}

\\"\\"\\"Methods to use when ordering \`ForwardUserInfo\`.\\"\\"\\"
enum ForwardUserInfosOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PHONE_ASC
  PHONE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

type Post implements Node {
  authorId: Int
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`Post\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input PostCondition {
  \\"\\"\\"Checks for equality with the object’s \`authorId\` field.\\"\\"\\"
  authorId: Int

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int
}

\\"\\"\\"A connection to a list of \`Post\` values.\\"\\"\\"
type PostsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Post\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [PostsEdge!]!

  \\"\\"\\"A list of \`Post\` objects.\\"\\"\\"
  nodes: [Post]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Post\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Post\` edge in the connection.\\"\\"\\"
type PostsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Post\` at the end of the edge.\\"\\"\\"
  node: Post
}

\\"\\"\\"Methods to use when ordering \`Post\`.\\"\\"\\"
enum PostsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`ForwardUserInfo\`.\\"\\"\\"
  allForwardUserInfos(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ForwardUserInfoCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`ForwardUserInfo\`.\\"\\"\\"
    orderBy: [ForwardUserInfosOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardUserInfosConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Post\`.\\"\\"\\"
  allPosts(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: PostCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Post\`.\\"\\"\\"
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`UserExtraInfo\`.\\"\\"\\"
  allUserExtraInfos(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: UserExtraInfoCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`UserExtraInfo\`.\\"\\"\\"
    orderBy: [UserExtraInfosOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserExtraInfosConnection

  \\"\\"\\"Reads and enables pagination through a set of \`User\`.\\"\\"\\"
  allUsers(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: UserCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`User\`.\\"\\"\\"
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection

  \\"\\"\\"Reads a single \`ForwardUserInfo\` using its globally unique \`ID\`.\\"\\"\\"
  forwardUserInfo(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`ForwardUserInfo\`.
    \\"\\"\\"
    nodeId: ID!
  ): ForwardUserInfo
  forwardUserInfoById(id: Int!): ForwardUserInfo

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Post\` using its globally unique \`ID\`.\\"\\"\\"
  post(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Post\`.\\"\\"\\"
    nodeId: ID!
  ): Post
  postById(id: Int!): Post

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!

  \\"\\"\\"Reads a single \`User\` using its globally unique \`ID\`.\\"\\"\\"
  user(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`User\`.\\"\\"\\"
    nodeId: ID!
  ): User
  userByForwardUserInfoId(forwardUserInfoId: Int!): User
  userById(id: Int!): User

  \\"\\"\\"Reads a single \`UserExtraInfo\` using its globally unique \`ID\`.\\"\\"\\"
  userExtraInfo(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`UserExtraInfo\`.
    \\"\\"\\"
    nodeId: ID!
  ): UserExtraInfo
  userExtraInfoById(id: Int!): UserExtraInfo
  userExtraInfoByUserId(userId: Int!): UserExtraInfo
}

type User implements Node {
  content: String

  \\"\\"\\"Reads a single \`ForwardUserInfo\` that is related to this \`User\`.\\"\\"\\"
  forwardUserInfoByForwardUserInfoId: ForwardUserInfo
  forwardUserInfoId: Int
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`UserExtraInfo\` that is related to this \`User\`.\\"\\"\\"
  userExtraInfoByUserId: UserExtraInfo
}

\\"\\"\\"
A condition to be used against \`User\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input UserCondition {
  \\"\\"\\"Checks for equality with the object’s \`content\` field.\\"\\"\\"
  content: String

  \\"\\"\\"Checks for equality with the object’s \`forwardUserInfoId\` field.\\"\\"\\"
  forwardUserInfoId: Int

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int
}

type UserExtraInfo implements Node {
  email: String
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`User\` that is related to this \`UserExtraInfo\`.\\"\\"\\"
  userByUserId: User
  userId: Int
}

\\"\\"\\"
A condition to be used against \`UserExtraInfo\` object types. All fields are
tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input UserExtraInfoCondition {
  \\"\\"\\"Checks for equality with the object’s \`email\` field.\\"\\"\\"
  email: String

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`userId\` field.\\"\\"\\"
  userId: Int
}

\\"\\"\\"A connection to a list of \`UserExtraInfo\` values.\\"\\"\\"
type UserExtraInfosConnection {
  \\"\\"\\"
  A list of edges which contains the \`UserExtraInfo\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [UserExtraInfosEdge!]!

  \\"\\"\\"A list of \`UserExtraInfo\` objects.\\"\\"\\"
  nodes: [UserExtraInfo]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`UserExtraInfo\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`UserExtraInfo\` edge in the connection.\\"\\"\\"
type UserExtraInfosEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`UserExtraInfo\` at the end of the edge.\\"\\"\\"
  node: UserExtraInfo
}

\\"\\"\\"Methods to use when ordering \`UserExtraInfo\`.\\"\\"\\"
enum UserExtraInfosOrderBy {
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

\\"\\"\\"A connection to a list of \`User\` values.\\"\\"\\"
type UsersConnection {
  \\"\\"\\"
  A list of edges which contains the \`User\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [UsersEdge!]!

  \\"\\"\\"A list of \`User\` objects.\\"\\"\\"
  nodes: [User]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`User\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`User\` edge in the connection.\\"\\"\\"
type UsersEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`User\` at the end of the edge.\\"\\"\\"
  node: User
}

\\"\\"\\"Methods to use when ordering \`User\`.\\"\\"\\"
enum UsersOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  FORWARD_USER_INFO_ID_ASC
  FORWARD_USER_INFO_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
"
`;
