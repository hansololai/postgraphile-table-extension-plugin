// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with the filter plugin 1`] = `
"type ArrayType implements Node {
  bit4Array: [BitString]
  boolArray: [Boolean]
  bpchar4Array: [String]
  byteaArray: [String]
  char4Array: [String]
  cidrArray: [String]
  citextArray: [String]
  dateArray: [Date]
  float4Array: [Float]
  float8Array: [Float]
  hstoreArray: [KeyValueHash]
  id: Int!
  inetArray: [InternetAddress]
  int2Array: [Int]
  int4Array: [Int]
  int8Array: [BigInt]
  intervalArray: [Interval]
  jsonArray: [JSON]
  jsonbArray: [JSON]
  macaddrArray: [String]
  moneyArray: [Float]

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  numericArray: [BigFloat]
  textArray: [String]
  timeArray: [Time]
  timestampArray: [Datetime]
  timestamptzArray: [Datetime]
  timetzArray: [Time]
  uuidArray: [UUID]
  varbitArray: [BitString]
  varcharArray: [String]
  xmlArray: [String]
}

\\"\\"\\"
A condition to be used against \`ArrayType\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input ArrayTypeCondition {
  \\"\\"\\"Checks for equality with the object’s \`bit4Array\` field.\\"\\"\\"
  bit4Array: [BitString]

  \\"\\"\\"Checks for equality with the object’s \`boolArray\` field.\\"\\"\\"
  boolArray: [Boolean]

  \\"\\"\\"Checks for equality with the object’s \`bpchar4Array\` field.\\"\\"\\"
  bpchar4Array: [String]

  \\"\\"\\"Checks for equality with the object’s \`byteaArray\` field.\\"\\"\\"
  byteaArray: [String]

  \\"\\"\\"Checks for equality with the object’s \`char4Array\` field.\\"\\"\\"
  char4Array: [String]

  \\"\\"\\"Checks for equality with the object’s \`cidrArray\` field.\\"\\"\\"
  cidrArray: [String]

  \\"\\"\\"Checks for equality with the object’s \`citextArray\` field.\\"\\"\\"
  citextArray: [String]

  \\"\\"\\"Checks for equality with the object’s \`dateArray\` field.\\"\\"\\"
  dateArray: [Date]

  \\"\\"\\"Checks for equality with the object’s \`float4Array\` field.\\"\\"\\"
  float4Array: [Float]

  \\"\\"\\"Checks for equality with the object’s \`float8Array\` field.\\"\\"\\"
  float8Array: [Float]

  \\"\\"\\"Checks for equality with the object’s \`hstoreArray\` field.\\"\\"\\"
  hstoreArray: [KeyValueHash]

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`inetArray\` field.\\"\\"\\"
  inetArray: [InternetAddress]

  \\"\\"\\"Checks for equality with the object’s \`int2Array\` field.\\"\\"\\"
  int2Array: [Int]

  \\"\\"\\"Checks for equality with the object’s \`int4Array\` field.\\"\\"\\"
  int4Array: [Int]

  \\"\\"\\"Checks for equality with the object’s \`int8Array\` field.\\"\\"\\"
  int8Array: [BigInt]

  \\"\\"\\"Checks for equality with the object’s \`intervalArray\` field.\\"\\"\\"
  intervalArray: [IntervalInput]

  \\"\\"\\"Checks for equality with the object’s \`jsonArray\` field.\\"\\"\\"
  jsonArray: [JSON]

  \\"\\"\\"Checks for equality with the object’s \`jsonbArray\` field.\\"\\"\\"
  jsonbArray: [JSON]

  \\"\\"\\"Checks for equality with the object’s \`macaddrArray\` field.\\"\\"\\"
  macaddrArray: [String]

  \\"\\"\\"Checks for equality with the object’s \`moneyArray\` field.\\"\\"\\"
  moneyArray: [Float]

  \\"\\"\\"Checks for equality with the object’s \`numericArray\` field.\\"\\"\\"
  numericArray: [BigFloat]

  \\"\\"\\"Checks for equality with the object’s \`textArray\` field.\\"\\"\\"
  textArray: [String]

  \\"\\"\\"Checks for equality with the object’s \`timeArray\` field.\\"\\"\\"
  timeArray: [Time]

  \\"\\"\\"Checks for equality with the object’s \`timestampArray\` field.\\"\\"\\"
  timestampArray: [Datetime]

  \\"\\"\\"Checks for equality with the object’s \`timestamptzArray\` field.\\"\\"\\"
  timestamptzArray: [Datetime]

  \\"\\"\\"Checks for equality with the object’s \`timetzArray\` field.\\"\\"\\"
  timetzArray: [Time]

  \\"\\"\\"Checks for equality with the object’s \`uuidArray\` field.\\"\\"\\"
  uuidArray: [UUID]

  \\"\\"\\"Checks for equality with the object’s \`varbitArray\` field.\\"\\"\\"
  varbitArray: [BitString]

  \\"\\"\\"Checks for equality with the object’s \`varcharArray\` field.\\"\\"\\"
  varcharArray: [String]

  \\"\\"\\"Checks for equality with the object’s \`xmlArray\` field.\\"\\"\\"
  xmlArray: [String]
}

\\"\\"\\"A connection to a list of \`ArrayType\` values.\\"\\"\\"
type ArrayTypesConnection {
  \\"\\"\\"
  A list of edges which contains the \`ArrayType\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ArrayTypesEdge!]!

  \\"\\"\\"A list of \`ArrayType\` objects.\\"\\"\\"
  nodes: [ArrayType]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`ArrayType\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`ArrayType\` edge in the connection.\\"\\"\\"
type ArrayTypesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`ArrayType\` at the end of the edge.\\"\\"\\"
  node: ArrayType
}

\\"\\"\\"Methods to use when ordering \`ArrayType\`.\\"\\"\\"
enum ArrayTypesOrderBy {
  BIT4_ARRAY_ASC
  BIT4_ARRAY_DESC
  BOOL_ARRAY_ASC
  BOOL_ARRAY_DESC
  BPCHAR4_ARRAY_ASC
  BPCHAR4_ARRAY_DESC
  BYTEA_ARRAY_ASC
  BYTEA_ARRAY_DESC
  CHAR4_ARRAY_ASC
  CHAR4_ARRAY_DESC
  CIDR_ARRAY_ASC
  CIDR_ARRAY_DESC
  CITEXT_ARRAY_ASC
  CITEXT_ARRAY_DESC
  DATE_ARRAY_ASC
  DATE_ARRAY_DESC
  FLOAT4_ARRAY_ASC
  FLOAT4_ARRAY_DESC
  FLOAT8_ARRAY_ASC
  FLOAT8_ARRAY_DESC
  HSTORE_ARRAY_ASC
  HSTORE_ARRAY_DESC
  ID_ASC
  ID_DESC
  INET_ARRAY_ASC
  INET_ARRAY_DESC
  INT2_ARRAY_ASC
  INT2_ARRAY_DESC
  INT4_ARRAY_ASC
  INT4_ARRAY_DESC
  INT8_ARRAY_ASC
  INT8_ARRAY_DESC
  INTERVAL_ARRAY_ASC
  INTERVAL_ARRAY_DESC
  JSON_ARRAY_ASC
  JSON_ARRAY_DESC
  JSONB_ARRAY_ASC
  JSONB_ARRAY_DESC
  MACADDR_ARRAY_ASC
  MACADDR_ARRAY_DESC
  MONEY_ARRAY_ASC
  MONEY_ARRAY_DESC
  NATURAL
  NUMERIC_ARRAY_ASC
  NUMERIC_ARRAY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEXT_ARRAY_ASC
  TEXT_ARRAY_DESC
  TIME_ARRAY_ASC
  TIME_ARRAY_DESC
  TIMESTAMP_ARRAY_ASC
  TIMESTAMP_ARRAY_DESC
  TIMESTAMPTZ_ARRAY_ASC
  TIMESTAMPTZ_ARRAY_DESC
  TIMETZ_ARRAY_ASC
  TIMETZ_ARRAY_DESC
  UUID_ARRAY_ASC
  UUID_ARRAY_DESC
  VARBIT_ARRAY_ASC
  VARBIT_ARRAY_DESC
  VARCHAR_ARRAY_ASC
  VARCHAR_ARRAY_DESC
  XML_ARRAY_ASC
  XML_ARRAY_DESC
}

type Backward implements Node {
  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Backward\`.\\"\\"\\"
  filterableByFilterableId: Filterable
  filterableId: Int
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

type BackwardCompound implements Node {
  backwardCompound1: Int!
  backwardCompound2: Int!

  \\"\\"\\"
  Reads a single \`Filterable\` that is related to this \`BackwardCompound\`.
  \\"\\"\\"
  filterableByBackwardCompound1AndBackwardCompound2: Filterable
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`BackwardCompound\` object types. All fields are
tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input BackwardCompoundCondition {
  \\"\\"\\"Checks for equality with the object’s \`backwardCompound1\` field.\\"\\"\\"
  backwardCompound1: Int

  \\"\\"\\"Checks for equality with the object’s \`backwardCompound2\` field.\\"\\"\\"
  backwardCompound2: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`BackwardCompound\` values.\\"\\"\\"
type BackwardCompoundsConnection {
  \\"\\"\\"
  A list of edges which contains the \`BackwardCompound\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [BackwardCompoundsEdge!]!

  \\"\\"\\"A list of \`BackwardCompound\` objects.\\"\\"\\"
  nodes: [BackwardCompound]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"
  The count of *all* \`BackwardCompound\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`BackwardCompound\` edge in the connection.\\"\\"\\"
type BackwardCompoundsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`BackwardCompound\` at the end of the edge.\\"\\"\\"
  node: BackwardCompound
}

\\"\\"\\"Methods to use when ordering \`BackwardCompound\`.\\"\\"\\"
enum BackwardCompoundsOrderBy {
  BACKWARD_COMPOUND_1_ASC
  BACKWARD_COMPOUND_1_DESC
  BACKWARD_COMPOUND_2_ASC
  BACKWARD_COMPOUND_2_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
A condition to be used against \`Backward\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input BackwardCondition {
  \\"\\"\\"Checks for equality with the object’s \`filterableId\` field.\\"\\"\\"
  filterableId: Int

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`Backward\` values.\\"\\"\\"
type BackwardsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Backward\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [BackwardsEdge!]!

  \\"\\"\\"A list of \`Backward\` objects.\\"\\"\\"
  nodes: [Backward]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Backward\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Backward\` edge in the connection.\\"\\"\\"
type BackwardsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Backward\` at the end of the edge.\\"\\"\\"
  node: Backward
}

\\"\\"\\"Methods to use when ordering \`Backward\`.\\"\\"\\"
enum BackwardsOrderBy {
  FILTERABLE_ID_ASC
  FILTERABLE_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
A floating point number that requires more precision than IEEE 754 binary 64
\\"\\"\\"
scalar BigFloat

\\"\\"\\"A range of \`BigFloat\`.\\"\\"\\"
type BigFloatRange {
  \\"\\"\\"The ending bound of our range.\\"\\"\\"
  end: BigFloatRangeBound

  \\"\\"\\"The starting bound of our range.\\"\\"\\"
  start: BigFloatRangeBound
}

\\"\\"\\"
The value at one end of a range. A range can either include this value, or not.
\\"\\"\\"
type BigFloatRangeBound {
  \\"\\"\\"Whether or not the value of this bound is included in the range.\\"\\"\\"
  inclusive: Boolean!

  \\"\\"\\"The value at one end of our range.\\"\\"\\"
  value: BigFloat!
}

\\"\\"\\"
The value at one end of a range. A range can either include this value, or not.
\\"\\"\\"
input BigFloatRangeBoundInput {
  \\"\\"\\"Whether or not the value of this bound is included in the range.\\"\\"\\"
  inclusive: Boolean!

  \\"\\"\\"The value at one end of our range.\\"\\"\\"
  value: BigFloat!
}

\\"\\"\\"A range of \`BigFloat\`.\\"\\"\\"
input BigFloatRangeInput {
  \\"\\"\\"The ending bound of our range.\\"\\"\\"
  end: BigFloatRangeBoundInput

  \\"\\"\\"The starting bound of our range.\\"\\"\\"
  start: BigFloatRangeBoundInput
}

\\"\\"\\"
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
\\"\\"\\"
scalar BigInt

\\"\\"\\"A range of \`BigInt\`.\\"\\"\\"
type BigIntRange {
  \\"\\"\\"The ending bound of our range.\\"\\"\\"
  end: BigIntRangeBound

  \\"\\"\\"The starting bound of our range.\\"\\"\\"
  start: BigIntRangeBound
}

\\"\\"\\"
The value at one end of a range. A range can either include this value, or not.
\\"\\"\\"
type BigIntRangeBound {
  \\"\\"\\"Whether or not the value of this bound is included in the range.\\"\\"\\"
  inclusive: Boolean!

  \\"\\"\\"The value at one end of our range.\\"\\"\\"
  value: BigInt!
}

\\"\\"\\"
The value at one end of a range. A range can either include this value, or not.
\\"\\"\\"
input BigIntRangeBoundInput {
  \\"\\"\\"Whether or not the value of this bound is included in the range.\\"\\"\\"
  inclusive: Boolean!

  \\"\\"\\"The value at one end of our range.\\"\\"\\"
  value: BigInt!
}

\\"\\"\\"A range of \`BigInt\`.\\"\\"\\"
input BigIntRangeInput {
  \\"\\"\\"The ending bound of our range.\\"\\"\\"
  end: BigIntRangeBoundInput

  \\"\\"\\"The starting bound of our range.\\"\\"\\"
  start: BigIntRangeBoundInput
}

\\"\\"\\"A string representing a series of binary bits\\"\\"\\"
scalar BitString

scalar Char4Domain

type Child implements Node {
  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Child\`.\\"\\"\\"
  filterableByFilterableId: Filterable
  filterableId: Int
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`Child\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input ChildCondition {
  \\"\\"\\"Checks for equality with the object’s \`filterableId\` field.\\"\\"\\"
  filterableId: Int

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`Child\` values.\\"\\"\\"
type ChildrenConnection {
  \\"\\"\\"
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ChildrenEdge!]!

  \\"\\"\\"A list of \`Child\` objects.\\"\\"\\"
  nodes: [Child]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Child\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Child\` edge in the connection.\\"\\"\\"
type ChildrenEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Child\` at the end of the edge.\\"\\"\\"
  node: Child
}

\\"\\"\\"Methods to use when ordering \`Child\`.\\"\\"\\"
enum ChildrenOrderBy {
  FILTERABLE_ID_ASC
  FILTERABLE_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Composite {
  a: Int
  b: String
}

\\"\\"\\"An input for mutations affecting \`Composite\`\\"\\"\\"
input CompositeInput {
  a: Int
  b: String
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"The day, does not include a time.\\"\\"\\"
scalar Date

scalar DateDomain

\\"\\"\\"A range of \`Date\`.\\"\\"\\"
type DateRange {
  \\"\\"\\"The ending bound of our range.\\"\\"\\"
  end: DateRangeBound

  \\"\\"\\"The starting bound of our range.\\"\\"\\"
  start: DateRangeBound
}

\\"\\"\\"
The value at one end of a range. A range can either include this value, or not.
\\"\\"\\"
type DateRangeBound {
  \\"\\"\\"Whether or not the value of this bound is included in the range.\\"\\"\\"
  inclusive: Boolean!

  \\"\\"\\"The value at one end of our range.\\"\\"\\"
  value: Date!
}

\\"\\"\\"
The value at one end of a range. A range can either include this value, or not.
\\"\\"\\"
input DateRangeBoundInput {
  \\"\\"\\"Whether or not the value of this bound is included in the range.\\"\\"\\"
  inclusive: Boolean!

  \\"\\"\\"The value at one end of our range.\\"\\"\\"
  value: Date!
}

\\"\\"\\"A range of \`Date\`.\\"\\"\\"
input DateRangeInput {
  \\"\\"\\"The ending bound of our range.\\"\\"\\"
  end: DateRangeBoundInput

  \\"\\"\\"The starting bound of our range.\\"\\"\\"
  start: DateRangeBoundInput
}

\\"\\"\\"
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
\\"\\"\\"
scalar Datetime

\\"\\"\\"A range of \`Datetime\`.\\"\\"\\"
type DatetimeRange {
  \\"\\"\\"The ending bound of our range.\\"\\"\\"
  end: DatetimeRangeBound

  \\"\\"\\"The starting bound of our range.\\"\\"\\"
  start: DatetimeRangeBound
}

\\"\\"\\"
The value at one end of a range. A range can either include this value, or not.
\\"\\"\\"
type DatetimeRangeBound {
  \\"\\"\\"Whether or not the value of this bound is included in the range.\\"\\"\\"
  inclusive: Boolean!

  \\"\\"\\"The value at one end of our range.\\"\\"\\"
  value: Datetime!
}

\\"\\"\\"
The value at one end of a range. A range can either include this value, or not.
\\"\\"\\"
input DatetimeRangeBoundInput {
  \\"\\"\\"Whether or not the value of this bound is included in the range.\\"\\"\\"
  inclusive: Boolean!

  \\"\\"\\"The value at one end of our range.\\"\\"\\"
  value: Datetime!
}

\\"\\"\\"A range of \`Datetime\`.\\"\\"\\"
input DatetimeRangeInput {
  \\"\\"\\"The ending bound of our range.\\"\\"\\"
  end: DatetimeRangeBoundInput

  \\"\\"\\"The starting bound of our range.\\"\\"\\"
  start: DatetimeRangeBoundInput
}

type DomainType implements Node {
  char4Domain: Char4Domain
  dateDomain: DateDomain
  id: Int!
  int4Domain: Int4Domain

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`DomainType\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input DomainTypeCondition {
  \\"\\"\\"Checks for equality with the object’s \`char4Domain\` field.\\"\\"\\"
  char4Domain: Char4Domain

  \\"\\"\\"Checks for equality with the object’s \`dateDomain\` field.\\"\\"\\"
  dateDomain: DateDomain

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`int4Domain\` field.\\"\\"\\"
  int4Domain: Int4Domain
}

\\"\\"\\"A connection to a list of \`DomainType\` values.\\"\\"\\"
type DomainTypesConnection {
  \\"\\"\\"
  A list of edges which contains the \`DomainType\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [DomainTypesEdge!]!

  \\"\\"\\"A list of \`DomainType\` objects.\\"\\"\\"
  nodes: [DomainType]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`DomainType\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`DomainType\` edge in the connection.\\"\\"\\"
type DomainTypesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`DomainType\` at the end of the edge.\\"\\"\\"
  node: DomainType
}

\\"\\"\\"Methods to use when ordering \`DomainType\`.\\"\\"\\"
enum DomainTypesOrderBy {
  CHAR4_DOMAIN_ASC
  CHAR4_DOMAIN_DESC
  DATE_DOMAIN_ASC
  DATE_DOMAIN_DESC
  ID_ASC
  ID_DESC
  INT4_DOMAIN_ASC
  INT4_DOMAIN_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type EnumArrayType implements Node {
  enumArray: [Mood]
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`EnumArrayType\` object types. All fields are
tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input EnumArrayTypeCondition {
  \\"\\"\\"Checks for equality with the object’s \`enumArray\` field.\\"\\"\\"
  enumArray: [Mood]

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int
}

\\"\\"\\"A connection to a list of \`EnumArrayType\` values.\\"\\"\\"
type EnumArrayTypesConnection {
  \\"\\"\\"
  A list of edges which contains the \`EnumArrayType\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [EnumArrayTypesEdge!]!

  \\"\\"\\"A list of \`EnumArrayType\` objects.\\"\\"\\"
  nodes: [EnumArrayType]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`EnumArrayType\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`EnumArrayType\` edge in the connection.\\"\\"\\"
type EnumArrayTypesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`EnumArrayType\` at the end of the edge.\\"\\"\\"
  node: EnumArrayType
}

\\"\\"\\"Methods to use when ordering \`EnumArrayType\`.\\"\\"\\"
enum EnumArrayTypesOrderBy {
  ENUM_ARRAY_ASC
  ENUM_ARRAY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type EnumType implements Node {
  enum: Mood
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`EnumType\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input EnumTypeCondition {
  \\"\\"\\"Checks for equality with the object’s \`enum\` field.\\"\\"\\"
  enum: Mood

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int
}

\\"\\"\\"A connection to a list of \`EnumType\` values.\\"\\"\\"
type EnumTypesConnection {
  \\"\\"\\"
  A list of edges which contains the \`EnumType\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [EnumTypesEdge!]!

  \\"\\"\\"A list of \`EnumType\` objects.\\"\\"\\"
  nodes: [EnumType]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`EnumType\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`EnumType\` edge in the connection.\\"\\"\\"
type EnumTypesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`EnumType\` at the end of the edge.\\"\\"\\"
  node: EnumType
}

\\"\\"\\"Methods to use when ordering \`EnumType\`.\\"\\"\\"
enum EnumTypesOrderBy {
  ENUM_ASC
  ENUM_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Filterable implements Node {
  \\"\\"\\"Reads a single \`Backward\` that is related to this \`Filterable\`.\\"\\"\\"
  backwardByFilterableId: Backward
  backwardCompound1: Int
  backwardCompound2: Int

  \\"\\"\\"
  Reads a single \`BackwardCompound\` that is related to this \`Filterable\`.
  \\"\\"\\"
  backwardCompoundByBackwardCompound1AndBackwardCompound2: BackwardCompound
  bit4: BitString
  bool: Boolean
  bpchar4: String
  bytea: String
  char4: String

  \\"\\"\\"Reads and enables pagination through a set of \`Child\`.\\"\\"\\"
  childrenByFilterableId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ChildCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Child\`.\\"\\"\\"
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!
  cidr: String
  citext: String
  compositeColumn: Composite
  computed: String
  computed2: String
  computedChild: Child
  computedIntArray: [Int]

  \\"\\"\\"Reads and enables pagination through a set of \`Child\`.\\"\\"\\"
  computedSetofChild(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
  ): ChildrenConnection!
  computedSetofInt(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
  ): FilterableComputedSetofIntConnection!
  computedTaggedFilterable: Int
  date: Date

  \\"\\"\\"Reads and enables pagination through a set of \`FilterableClosure\`.\\"\\"\\"
  filterableClosuresByAncestorId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: FilterableClosureCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`FilterableClosure\`.\\"\\"\\"
    orderBy: [FilterableClosuresOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterableClosuresConnection!

  \\"\\"\\"Reads and enables pagination through a set of \`FilterableClosure\`.\\"\\"\\"
  filterableClosuresByDescendantId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: FilterableClosureCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`FilterableClosure\`.\\"\\"\\"
    orderBy: [FilterableClosuresOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterableClosuresConnection!
  float4: Float
  float8: Float

  \\"\\"\\"Reads a single \`Forward\` that is related to this \`Filterable\`.\\"\\"\\"
  forwardByForwardId: Forward
  forwardColumn: Forward
  forwardCompound1: Int
  forwardCompound2: Int

  \\"\\"\\"Reads a single \`ForwardCompound\` that is related to this \`Filterable\`.\\"\\"\\"
  forwardCompoundByForwardCompound1AndForwardCompound2: ForwardCompound
  forwardId: Int
  hstore: KeyValueHash
  id: Int!
  inet: InternetAddress
  int2: Int
  int4: Int
  int8: BigInt
  interval: Interval
  json: JSON
  jsonb: JSON
  macaddr: String
  money: Float
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  numeric: BigFloat

  \\"\\"\\"Reads a single \`Parent\` that is related to this \`Filterable\`.\\"\\"\\"
  parentByParentId: Parent
  parentId: Int
  text: String
  textOmitFilter: String
  time: Time
  timestamp: Datetime
  timestamptz: Datetime
  timetz: Time
  uuid: UUID
  varbit: BitString
  varchar: String
  xml: String
}

type FilterableClosure implements Node {
  ancestorId: Int!
  depth: Int!
  descendantId: Int!

  \\"\\"\\"
  Reads a single \`Filterable\` that is related to this \`FilterableClosure\`.
  \\"\\"\\"
  filterableByAncestorId: Filterable

  \\"\\"\\"
  Reads a single \`Filterable\` that is related to this \`FilterableClosure\`.
  \\"\\"\\"
  filterableByDescendantId: Filterable
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`FilterableClosure\` object types. All fields are
tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input FilterableClosureCondition {
  \\"\\"\\"Checks for equality with the object’s \`ancestorId\` field.\\"\\"\\"
  ancestorId: Int

  \\"\\"\\"Checks for equality with the object’s \`depth\` field.\\"\\"\\"
  depth: Int

  \\"\\"\\"Checks for equality with the object’s \`descendantId\` field.\\"\\"\\"
  descendantId: Int

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int
}

\\"\\"\\"A connection to a list of \`FilterableClosure\` values.\\"\\"\\"
type FilterableClosuresConnection {
  \\"\\"\\"
  A list of edges which contains the \`FilterableClosure\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FilterableClosuresEdge!]!

  \\"\\"\\"A list of \`FilterableClosure\` objects.\\"\\"\\"
  nodes: [FilterableClosure]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"
  The count of *all* \`FilterableClosure\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`FilterableClosure\` edge in the connection.\\"\\"\\"
type FilterableClosuresEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`FilterableClosure\` at the end of the edge.\\"\\"\\"
  node: FilterableClosure
}

\\"\\"\\"Methods to use when ordering \`FilterableClosure\`.\\"\\"\\"
enum FilterableClosuresOrderBy {
  ANCESTOR_ID_ASC
  ANCESTOR_ID_DESC
  DEPTH_ASC
  DEPTH_DESC
  DESCENDANT_ID_ASC
  DESCENDANT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"A connection to a list of \`Int\` values.\\"\\"\\"
type FilterableComputedSetofIntConnection {
  \\"\\"\\"
  A list of edges which contains the \`Int\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FilterableComputedSetofIntEdge!]!

  \\"\\"\\"A list of \`Int\` objects.\\"\\"\\"
  nodes: [Int]!

  \\"\\"\\"The count of *all* \`Int\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Int\` edge in the connection.\\"\\"\\"
type FilterableComputedSetofIntEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Int\` at the end of the edge.\\"\\"\\"
  node: Int
}

\\"\\"\\"
A condition to be used against \`Filterable\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input FilterableCondition {
  \\"\\"\\"Checks for equality with the object’s \`backwardCompound1\` field.\\"\\"\\"
  backwardCompound1: Int

  \\"\\"\\"Checks for equality with the object’s \`backwardCompound2\` field.\\"\\"\\"
  backwardCompound2: Int

  \\"\\"\\"Checks for equality with the object’s \`bit4\` field.\\"\\"\\"
  bit4: BitString

  \\"\\"\\"Checks for equality with the object’s \`bool\` field.\\"\\"\\"
  bool: Boolean

  \\"\\"\\"Checks for equality with the object’s \`bpchar4\` field.\\"\\"\\"
  bpchar4: String

  \\"\\"\\"Checks for equality with the object’s \`bytea\` field.\\"\\"\\"
  bytea: String

  \\"\\"\\"Checks for equality with the object’s \`char4\` field.\\"\\"\\"
  char4: String

  \\"\\"\\"Checks for equality with the object’s \`cidr\` field.\\"\\"\\"
  cidr: String

  \\"\\"\\"Checks for equality with the object’s \`citext\` field.\\"\\"\\"
  citext: String

  \\"\\"\\"Checks for equality with the object’s \`compositeColumn\` field.\\"\\"\\"
  compositeColumn: CompositeInput

  \\"\\"\\"
  Checks for equality with the object’s \`computedTaggedFilterable\` field.
  \\"\\"\\"
  computedTaggedFilterable: Int

  \\"\\"\\"Checks for equality with the object’s \`date\` field.\\"\\"\\"
  date: Date

  \\"\\"\\"Checks for equality with the object’s \`float4\` field.\\"\\"\\"
  float4: Float

  \\"\\"\\"Checks for equality with the object’s \`float8\` field.\\"\\"\\"
  float8: Float

  \\"\\"\\"Checks for equality with the object’s \`forwardColumn\` field.\\"\\"\\"
  forwardColumn: ForwardInput

  \\"\\"\\"Checks for equality with the object’s \`forwardCompound1\` field.\\"\\"\\"
  forwardCompound1: Int

  \\"\\"\\"Checks for equality with the object’s \`forwardCompound2\` field.\\"\\"\\"
  forwardCompound2: Int

  \\"\\"\\"Checks for equality with the object’s \`forwardId\` field.\\"\\"\\"
  forwardId: Int

  \\"\\"\\"Checks for equality with the object’s \`hstore\` field.\\"\\"\\"
  hstore: KeyValueHash

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`inet\` field.\\"\\"\\"
  inet: InternetAddress

  \\"\\"\\"Checks for equality with the object’s \`int2\` field.\\"\\"\\"
  int2: Int

  \\"\\"\\"Checks for equality with the object’s \`int4\` field.\\"\\"\\"
  int4: Int

  \\"\\"\\"Checks for equality with the object’s \`int8\` field.\\"\\"\\"
  int8: BigInt

  \\"\\"\\"Checks for equality with the object’s \`interval\` field.\\"\\"\\"
  interval: IntervalInput

  \\"\\"\\"Checks for equality with the object’s \`json\` field.\\"\\"\\"
  json: JSON

  \\"\\"\\"Checks for equality with the object’s \`jsonb\` field.\\"\\"\\"
  jsonb: JSON

  \\"\\"\\"Checks for equality with the object’s \`macaddr\` field.\\"\\"\\"
  macaddr: String

  \\"\\"\\"Checks for equality with the object’s \`money\` field.\\"\\"\\"
  money: Float

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String

  \\"\\"\\"Checks for equality with the object’s \`numeric\` field.\\"\\"\\"
  numeric: BigFloat

  \\"\\"\\"Checks for equality with the object’s \`parentId\` field.\\"\\"\\"
  parentId: Int

  \\"\\"\\"Checks for equality with the object’s \`text\` field.\\"\\"\\"
  text: String

  \\"\\"\\"Checks for equality with the object’s \`time\` field.\\"\\"\\"
  time: Time

  \\"\\"\\"Checks for equality with the object’s \`timestamp\` field.\\"\\"\\"
  timestamp: Datetime

  \\"\\"\\"Checks for equality with the object’s \`timestamptz\` field.\\"\\"\\"
  timestamptz: Datetime

  \\"\\"\\"Checks for equality with the object’s \`timetz\` field.\\"\\"\\"
  timetz: Time

  \\"\\"\\"Checks for equality with the object’s \`uuid\` field.\\"\\"\\"
  uuid: UUID

  \\"\\"\\"Checks for equality with the object’s \`varbit\` field.\\"\\"\\"
  varbit: BitString

  \\"\\"\\"Checks for equality with the object’s \`varchar\` field.\\"\\"\\"
  varchar: String

  \\"\\"\\"Checks for equality with the object’s \`xml\` field.\\"\\"\\"
  xml: String
}

\\"\\"\\"A connection to a list of \`Filterable\` values.\\"\\"\\"
type FilterablesConnection {
  \\"\\"\\"
  A list of edges which contains the \`Filterable\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FilterablesEdge!]!

  \\"\\"\\"A list of \`Filterable\` objects.\\"\\"\\"
  nodes: [Filterable]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Filterable\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Filterable\` edge in the connection.\\"\\"\\"
type FilterablesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Filterable\` at the end of the edge.\\"\\"\\"
  node: Filterable
}

\\"\\"\\"Methods to use when ordering \`Filterable\`.\\"\\"\\"
enum FilterablesOrderBy {
  BACKWARD_COMPOUND_1_ASC
  BACKWARD_COMPOUND_1_DESC
  BACKWARD_COMPOUND_2_ASC
  BACKWARD_COMPOUND_2_DESC
  BIT4_ASC
  BIT4_DESC
  BOOL_ASC
  BOOL_DESC
  BPCHAR4_ASC
  BPCHAR4_DESC
  BYTEA_ASC
  BYTEA_DESC
  CHAR4_ASC
  CHAR4_DESC
  CIDR_ASC
  CIDR_DESC
  CITEXT_ASC
  CITEXT_DESC
  COMPOSITE_COLUMN_ASC
  COMPOSITE_COLUMN_DESC
  DATE_ASC
  DATE_DESC
  FLOAT4_ASC
  FLOAT4_DESC
  FLOAT8_ASC
  FLOAT8_DESC
  FORWARD_COLUMN_ASC
  FORWARD_COLUMN_DESC
  FORWARD_COMPOUND_1_ASC
  FORWARD_COMPOUND_1_DESC
  FORWARD_COMPOUND_2_ASC
  FORWARD_COMPOUND_2_DESC
  FORWARD_ID_ASC
  FORWARD_ID_DESC
  HSTORE_ASC
  HSTORE_DESC
  ID_ASC
  ID_DESC
  INET_ASC
  INET_DESC
  INT2_ASC
  INT2_DESC
  INT4_ASC
  INT4_DESC
  INT8_ASC
  INT8_DESC
  INTERVAL_ASC
  INTERVAL_DESC
  JSON_ASC
  JSON_DESC
  JSONB_ASC
  JSONB_DESC
  MACADDR_ASC
  MACADDR_DESC
  MONEY_ASC
  MONEY_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  NUMERIC_ASC
  NUMERIC_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEXT_ASC
  TEXT_DESC
  TEXT_OMIT_FILTER_ASC
  TEXT_OMIT_FILTER_DESC
  TIME_ASC
  TIME_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  TIMESTAMPTZ_ASC
  TIMESTAMPTZ_DESC
  TIMETZ_ASC
  TIMETZ_DESC
  UUID_ASC
  UUID_DESC
  VARBIT_ASC
  VARBIT_DESC
  VARCHAR_ASC
  VARCHAR_DESC
  XML_ASC
  XML_DESC
}

type Forward implements Node {
  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Forward\`.\\"\\"\\"
  filterableByForwardId: Filterable
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

type ForwardCompound implements Node {
  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`ForwardCompound\`.\\"\\"\\"
  filterableByForwardCompound1AndForwardCompound2: Filterable
  forwardCompound1: Int!
  forwardCompound2: Int!
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`ForwardCompound\` object types. All fields are
tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input ForwardCompoundCondition {
  \\"\\"\\"Checks for equality with the object’s \`forwardCompound1\` field.\\"\\"\\"
  forwardCompound1: Int

  \\"\\"\\"Checks for equality with the object’s \`forwardCompound2\` field.\\"\\"\\"
  forwardCompound2: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`ForwardCompound\` values.\\"\\"\\"
type ForwardCompoundsConnection {
  \\"\\"\\"
  A list of edges which contains the \`ForwardCompound\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ForwardCompoundsEdge!]!

  \\"\\"\\"A list of \`ForwardCompound\` objects.\\"\\"\\"
  nodes: [ForwardCompound]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"
  The count of *all* \`ForwardCompound\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`ForwardCompound\` edge in the connection.\\"\\"\\"
type ForwardCompoundsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`ForwardCompound\` at the end of the edge.\\"\\"\\"
  node: ForwardCompound
}

\\"\\"\\"Methods to use when ordering \`ForwardCompound\`.\\"\\"\\"
enum ForwardCompoundsOrderBy {
  FORWARD_COMPOUND_1_ASC
  FORWARD_COMPOUND_1_DESC
  FORWARD_COMPOUND_2_ASC
  FORWARD_COMPOUND_2_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
A condition to be used against \`Forward\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input ForwardCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"An input for mutations affecting \`Forward\`\\"\\"\\"
input ForwardInput {
  id: Int
  name: String!
}

\\"\\"\\"A connection to a list of \`Forward\` values.\\"\\"\\"
type ForwardsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Forward\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ForwardsEdge!]!

  \\"\\"\\"A list of \`Forward\` objects.\\"\\"\\"
  nodes: [Forward]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Forward\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Forward\` edge in the connection.\\"\\"\\"
type ForwardsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Forward\` at the end of the edge.\\"\\"\\"
  node: Forward
}

\\"\\"\\"Methods to use when ordering \`Forward\`.\\"\\"\\"
enum ForwardsOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type FullyOmitted implements Node {
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  text: String
}

\\"\\"\\"A connection to a list of \`FullyOmitted\` values.\\"\\"\\"
type FullyOmittedsConnection {
  \\"\\"\\"
  A list of edges which contains the \`FullyOmitted\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FullyOmittedsEdge!]!

  \\"\\"\\"A list of \`FullyOmitted\` objects.\\"\\"\\"
  nodes: [FullyOmitted]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`FullyOmitted\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`FullyOmitted\` edge in the connection.\\"\\"\\"
type FullyOmittedsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`FullyOmitted\` at the end of the edge.\\"\\"\\"
  node: FullyOmitted
}

\\"\\"\\"Methods to use when ordering \`FullyOmitted\`.\\"\\"\\"
enum FullyOmittedsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEXT_ASC
  TEXT_DESC
}

\\"\\"\\"A connection to a list of \`FuncReturnsTableMultiColRecord\` values.\\"\\"\\"
type FuncReturnsTableMultiColConnection {
  \\"\\"\\"
  A list of edges which contains the \`FuncReturnsTableMultiColRecord\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FuncReturnsTableMultiColEdge!]!

  \\"\\"\\"A list of \`FuncReturnsTableMultiColRecord\` objects.\\"\\"\\"
  nodes: [FuncReturnsTableMultiColRecord]!

  \\"\\"\\"
  The count of *all* \`FuncReturnsTableMultiColRecord\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`FuncReturnsTableMultiColRecord\` edge in the connection.\\"\\"\\"
type FuncReturnsTableMultiColEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`FuncReturnsTableMultiColRecord\` at the end of the edge.\\"\\"\\"
  node: FuncReturnsTableMultiColRecord
}

\\"\\"\\"The return type of our \`funcReturnsTableMultiCol\` query.\\"\\"\\"
type FuncReturnsTableMultiColRecord {
  col1: Int
  col2: String
}

\\"\\"\\"A connection to a list of \`Int\` values.\\"\\"\\"
type FuncReturnsTableOneColConnection {
  \\"\\"\\"
  A list of edges which contains the \`Int\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FuncReturnsTableOneColEdge!]!

  \\"\\"\\"A list of \`Int\` objects.\\"\\"\\"
  nodes: [Int]!

  \\"\\"\\"The count of *all* \`Int\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Int\` edge in the connection.\\"\\"\\"
type FuncReturnsTableOneColEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Int\` at the end of the edge.\\"\\"\\"
  node: Int
}

\\"\\"\\"
A connection to a list of \`FuncTaggedFilterableReturnsTableMultiColRecord\` values.
\\"\\"\\"
type FuncTaggedFilterableReturnsTableMultiColConnection {
  \\"\\"\\"
  A list of edges which contains the \`FuncTaggedFilterableReturnsTableMultiColRecord\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FuncTaggedFilterableReturnsTableMultiColEdge!]!

  \\"\\"\\"A list of \`FuncTaggedFilterableReturnsTableMultiColRecord\` objects.\\"\\"\\"
  nodes: [FuncTaggedFilterableReturnsTableMultiColRecord]!

  \\"\\"\\"
  The count of *all* \`FuncTaggedFilterableReturnsTableMultiColRecord\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"
A \`FuncTaggedFilterableReturnsTableMultiColRecord\` edge in the connection.
\\"\\"\\"
type FuncTaggedFilterableReturnsTableMultiColEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"
  The \`FuncTaggedFilterableReturnsTableMultiColRecord\` at the end of the edge.
  \\"\\"\\"
  node: FuncTaggedFilterableReturnsTableMultiColRecord
}

\\"\\"\\"
The return type of our \`funcTaggedFilterableReturnsTableMultiCol\` query.
\\"\\"\\"
type FuncTaggedFilterableReturnsTableMultiColRecord {
  col1: Int
  col2: String
}

scalar Int4Domain

\\"\\"\\"An IPv4 or IPv6 host address, and optionally its subnet.\\"\\"\\"
scalar InternetAddress

\\"\\"\\"
An interval of time that has passed where the smallest distinct unit is a second.
\\"\\"\\"
type Interval {
  \\"\\"\\"A quantity of days.\\"\\"\\"
  days: Int

  \\"\\"\\"A quantity of hours.\\"\\"\\"
  hours: Int

  \\"\\"\\"A quantity of minutes.\\"\\"\\"
  minutes: Int

  \\"\\"\\"A quantity of months.\\"\\"\\"
  months: Int

  \\"\\"\\"
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  \\"\\"\\"
  seconds: Float

  \\"\\"\\"A quantity of years.\\"\\"\\"
  years: Int
}

\\"\\"\\"
An interval of time that has passed where the smallest distinct unit is a second.
\\"\\"\\"
input IntervalInput {
  \\"\\"\\"A quantity of days.\\"\\"\\"
  days: Int

  \\"\\"\\"A quantity of hours.\\"\\"\\"
  hours: Int

  \\"\\"\\"A quantity of minutes.\\"\\"\\"
  minutes: Int

  \\"\\"\\"A quantity of months.\\"\\"\\"
  months: Int

  \\"\\"\\"
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  \\"\\"\\"
  seconds: Float

  \\"\\"\\"A quantity of years.\\"\\"\\"
  years: Int
}

\\"\\"\\"A range of \`Int\`.\\"\\"\\"
type IntRange {
  \\"\\"\\"The ending bound of our range.\\"\\"\\"
  end: IntRangeBound

  \\"\\"\\"The starting bound of our range.\\"\\"\\"
  start: IntRangeBound
}

\\"\\"\\"
The value at one end of a range. A range can either include this value, or not.
\\"\\"\\"
type IntRangeBound {
  \\"\\"\\"Whether or not the value of this bound is included in the range.\\"\\"\\"
  inclusive: Boolean!

  \\"\\"\\"The value at one end of our range.\\"\\"\\"
  value: Int!
}

\\"\\"\\"
The value at one end of a range. A range can either include this value, or not.
\\"\\"\\"
input IntRangeBoundInput {
  \\"\\"\\"Whether or not the value of this bound is included in the range.\\"\\"\\"
  inclusive: Boolean!

  \\"\\"\\"The value at one end of our range.\\"\\"\\"
  value: Int!
}

\\"\\"\\"A range of \`Int\`.\\"\\"\\"
input IntRangeInput {
  \\"\\"\\"The ending bound of our range.\\"\\"\\"
  end: IntRangeBoundInput

  \\"\\"\\"The starting bound of our range.\\"\\"\\"
  start: IntRangeBoundInput
}

\\"\\"\\"
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar JSON

type JsonbTest implements Node {
  id: Int!
  jsonbWithArray: JSON
  jsonbWithObject: JSON

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`JsonbTest\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input JsonbTestCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`jsonbWithArray\` field.\\"\\"\\"
  jsonbWithArray: JSON

  \\"\\"\\"Checks for equality with the object’s \`jsonbWithObject\` field.\\"\\"\\"
  jsonbWithObject: JSON
}

\\"\\"\\"A connection to a list of \`JsonbTest\` values.\\"\\"\\"
type JsonbTestsConnection {
  \\"\\"\\"
  A list of edges which contains the \`JsonbTest\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [JsonbTestsEdge!]!

  \\"\\"\\"A list of \`JsonbTest\` objects.\\"\\"\\"
  nodes: [JsonbTest]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`JsonbTest\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`JsonbTest\` edge in the connection.\\"\\"\\"
type JsonbTestsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`JsonbTest\` at the end of the edge.\\"\\"\\"
  node: JsonbTest
}

\\"\\"\\"Methods to use when ordering \`JsonbTest\`.\\"\\"\\"
enum JsonbTestsOrderBy {
  ID_ASC
  ID_DESC
  JSONB_WITH_ARRAY_ASC
  JSONB_WITH_ARRAY_DESC
  JSONB_WITH_OBJECT_ASC
  JSONB_WITH_OBJECT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Junction implements Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`SideA\` that is related to this \`Junction\`.\\"\\"\\"
  sideABySideAId: SideA
  sideAId: Int!

  \\"\\"\\"Reads a single \`SideB\` that is related to this \`Junction\`.\\"\\"\\"
  sideBBySideBId: SideB
  sideBId: Int!
}

\\"\\"\\"
A condition to be used against \`Junction\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input JunctionCondition {
  \\"\\"\\"Checks for equality with the object’s \`sideAId\` field.\\"\\"\\"
  sideAId: Int

  \\"\\"\\"Checks for equality with the object’s \`sideBId\` field.\\"\\"\\"
  sideBId: Int
}

\\"\\"\\"A connection to a list of \`Junction\` values.\\"\\"\\"
type JunctionsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Junction\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [JunctionsEdge!]!

  \\"\\"\\"A list of \`Junction\` objects.\\"\\"\\"
  nodes: [Junction]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Junction\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Junction\` edge in the connection.\\"\\"\\"
type JunctionsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Junction\` at the end of the edge.\\"\\"\\"
  node: Junction
}

\\"\\"\\"Methods to use when ordering \`Junction\`.\\"\\"\\"
enum JunctionsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SIDE_A_ID_ASC
  SIDE_A_ID_DESC
  SIDE_B_ID_ASC
  SIDE_B_ID_DESC
}

\\"\\"\\"
A set of key/value pairs, keys are strings, values may be a string or null. Exposed as a JSON object.
\\"\\"\\"
scalar KeyValueHash

enum Mood {
  HAPPY
  OK
  SAD
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

type Parent implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Filterable\`.\\"\\"\\"
  filterablesByParentId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: FilterableCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesConnection!
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`Parent\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input ParentCondition {
  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`Parent\` values.\\"\\"\\"
type ParentsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ParentsEdge!]!

  \\"\\"\\"A list of \`Parent\` objects.\\"\\"\\"
  nodes: [Parent]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Parent\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Parent\` edge in the connection.\\"\\"\\"
type ParentsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Parent\` at the end of the edge.\\"\\"\\"
  node: Parent
}

\\"\\"\\"Methods to use when ordering \`Parent\`.\\"\\"\\"
enum ParentsOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Protected implements Node {
  id: Int!
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  otherId: Int
}

\\"\\"\\"A connection to a list of \`Protected\` values.\\"\\"\\"
type ProtectedsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Protected\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ProtectedsEdge!]!

  \\"\\"\\"A list of \`Protected\` objects.\\"\\"\\"
  nodes: [Protected]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Protected\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Protected\` edge in the connection.\\"\\"\\"
type ProtectedsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Protected\` at the end of the edge.\\"\\"\\"
  node: Protected
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`ArrayType\`.\\"\\"\\"
  allArrayTypes(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ArrayTypeCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`ArrayType\`.\\"\\"\\"
    orderBy: [ArrayTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArrayTypesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`BackwardCompound\`.\\"\\"\\"
  allBackwardCompounds(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: BackwardCompoundCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`BackwardCompound\`.\\"\\"\\"
    orderBy: [BackwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardCompoundsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Backward\`.\\"\\"\\"
  allBackwards(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: BackwardCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Backward\`.\\"\\"\\"
    orderBy: [BackwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Child\`.\\"\\"\\"
  allChildren(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ChildCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Child\`.\\"\\"\\"
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  \\"\\"\\"Reads and enables pagination through a set of \`DomainType\`.\\"\\"\\"
  allDomainTypes(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: DomainTypeCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`DomainType\`.\\"\\"\\"
    orderBy: [DomainTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DomainTypesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`EnumArrayType\`.\\"\\"\\"
  allEnumArrayTypes(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: EnumArrayTypeCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`EnumArrayType\`.\\"\\"\\"
    orderBy: [EnumArrayTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnumArrayTypesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`EnumType\`.\\"\\"\\"
  allEnumTypes(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: EnumTypeCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`EnumType\`.\\"\\"\\"
    orderBy: [EnumTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnumTypesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Filterable\`.\\"\\"\\"
  allFilterables(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: FilterableCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`ForwardCompound\`.\\"\\"\\"
  allForwardCompounds(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ForwardCompoundCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`ForwardCompound\`.\\"\\"\\"
    orderBy: [ForwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardCompoundsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Forward\`.\\"\\"\\"
  allForwards(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ForwardCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Forward\`.\\"\\"\\"
    orderBy: [ForwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`FullyOmitted\`.\\"\\"\\"
  allFullyOmitteds(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`FullyOmitted\`.\\"\\"\\"
    orderBy: [FullyOmittedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FullyOmittedsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`JsonbTest\`.\\"\\"\\"
  allJsonbTests(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: JsonbTestCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`JsonbTest\`.\\"\\"\\"
    orderBy: [JsonbTestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JsonbTestsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Junction\`.\\"\\"\\"
  allJunctions(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: JunctionCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Junction\`.\\"\\"\\"
    orderBy: [JunctionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Parent\`.\\"\\"\\"
  allParents(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ParentCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Parent\`.\\"\\"\\"
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`RangeArrayType\`.\\"\\"\\"
  allRangeArrayTypes(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: RangeArrayTypeCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`RangeArrayType\`.\\"\\"\\"
    orderBy: [RangeArrayTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RangeArrayTypesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`RangeType\`.\\"\\"\\"
  allRangeTypes(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: RangeTypeCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`RangeType\`.\\"\\"\\"
    orderBy: [RangeTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RangeTypesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`SideA\`.\\"\\"\\"
  allSideAs(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: SideACondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`SideA\`.\\"\\"\\"
    orderBy: [SideAsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SideAsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`SideB\`.\\"\\"\\"
  allSideBs(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: SideBCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`SideB\`.\\"\\"\\"
    orderBy: [SideBsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SideBsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Tagg\`.\\"\\"\\"
  allTaggs(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: TaggCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Tagg\`.\\"\\"\\"
    orderBy: [TaggsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaggsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Unfilterable\`.\\"\\"\\"
  allUnfilterables(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Unfilterable\`.\\"\\"\\"
    orderBy: [UnfilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnfilterablesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`UniqueTagg\`.\\"\\"\\"
  allUniqueTaggs(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: UniqueTaggCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`UniqueTagg\`.\\"\\"\\"
    orderBy: [UniqueTaggsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UniqueTaggsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`ViewTag\`.\\"\\"\\"
  allViewTags(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: ViewTagCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`ViewTag\`.\\"\\"\\"
    orderBy: [ViewTagsOrderBy!] = [NATURAL]
  ): ViewTagsConnection

  \\"\\"\\"Reads a single \`ArrayType\` using its globally unique \`ID\`.\\"\\"\\"
  arrayType(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`ArrayType\`.\\"\\"\\"
    nodeId: ID!
  ): ArrayType
  arrayTypeById(id: Int!): ArrayType

  \\"\\"\\"Reads a single \`Backward\` using its globally unique \`ID\`.\\"\\"\\"
  backward(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Backward\`.\\"\\"\\"
    nodeId: ID!
  ): Backward
  backwardByFilterableId(filterableId: Int!): Backward
  backwardById(id: Int!): Backward

  \\"\\"\\"Reads a single \`BackwardCompound\` using its globally unique \`ID\`.\\"\\"\\"
  backwardCompound(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`BackwardCompound\`.
    \\"\\"\\"
    nodeId: ID!
  ): BackwardCompound
  backwardCompoundByBackwardCompound1AndBackwardCompound2(backwardCompound1: Int!, backwardCompound2: Int!): BackwardCompound

  \\"\\"\\"Reads a single \`Child\` using its globally unique \`ID\`.\\"\\"\\"
  child(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Child\`.\\"\\"\\"
    nodeId: ID!
  ): Child
  childById(id: Int!): Child

  \\"\\"\\"Reads a single \`DomainType\` using its globally unique \`ID\`.\\"\\"\\"
  domainType(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`DomainType\`.
    \\"\\"\\"
    nodeId: ID!
  ): DomainType
  domainTypeById(id: Int!): DomainType

  \\"\\"\\"Reads a single \`EnumArrayType\` using its globally unique \`ID\`.\\"\\"\\"
  enumArrayType(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`EnumArrayType\`.
    \\"\\"\\"
    nodeId: ID!
  ): EnumArrayType
  enumArrayTypeById(id: Int!): EnumArrayType

  \\"\\"\\"Reads a single \`EnumType\` using its globally unique \`ID\`.\\"\\"\\"
  enumType(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`EnumType\`.\\"\\"\\"
    nodeId: ID!
  ): EnumType
  enumTypeById(id: Int!): EnumType

  \\"\\"\\"Reads a single \`Filterable\` using its globally unique \`ID\`.\\"\\"\\"
  filterable(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`Filterable\`.
    \\"\\"\\"
    nodeId: ID!
  ): Filterable
  filterableByBackwardCompound1AndBackwardCompound2(backwardCompound1: Int!, backwardCompound2: Int!): Filterable
  filterableByForwardCompound1AndForwardCompound2(forwardCompound1: Int!, forwardCompound2: Int!): Filterable
  filterableByForwardId(forwardId: Int!): Filterable
  filterableById(id: Int!): Filterable

  \\"\\"\\"Reads a single \`FilterableClosure\` using its globally unique \`ID\`.\\"\\"\\"
  filterableClosure(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`FilterableClosure\`.
    \\"\\"\\"
    nodeId: ID!
  ): FilterableClosure
  filterableClosureById(id: Int!): FilterableClosure

  \\"\\"\\"Reads a single \`Forward\` using its globally unique \`ID\`.\\"\\"\\"
  forward(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Forward\`.\\"\\"\\"
    nodeId: ID!
  ): Forward
  forwardById(id: Int!): Forward

  \\"\\"\\"Reads a single \`ForwardCompound\` using its globally unique \`ID\`.\\"\\"\\"
  forwardCompound(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`ForwardCompound\`.
    \\"\\"\\"
    nodeId: ID!
  ): ForwardCompound
  forwardCompoundByForwardCompound1AndForwardCompound2(forwardCompound1: Int!, forwardCompound2: Int!): ForwardCompound

  \\"\\"\\"Reads a single \`FullyOmitted\` using its globally unique \`ID\`.\\"\\"\\"
  fullyOmitted(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`FullyOmitted\`.
    \\"\\"\\"
    nodeId: ID!
  ): FullyOmitted
  fullyOmittedById(id: Int!): FullyOmitted
  funcReturnsTableMultiCol(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int
    i: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
  ): FuncReturnsTableMultiColConnection!
  funcReturnsTableOneCol(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int
    i: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
  ): FuncReturnsTableOneColConnection!

  \\"\\"\\"Reads and enables pagination through a set of \`Filterable\`.\\"\\"\\"
  funcTaggedFilterableReturnsSetofFilterable(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: FilterableCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
  ): FilterablesConnection!
  funcTaggedFilterableReturnsTableMultiCol(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
  ): FuncTaggedFilterableReturnsTableMultiColConnection!

  \\"\\"\\"Reads a single \`JsonbTest\` using its globally unique \`ID\`.\\"\\"\\"
  jsonbTest(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`JsonbTest\`.\\"\\"\\"
    nodeId: ID!
  ): JsonbTest
  jsonbTestById(id: Int!): JsonbTest

  \\"\\"\\"Reads a single \`Junction\` using its globally unique \`ID\`.\\"\\"\\"
  junction(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Junction\`.\\"\\"\\"
    nodeId: ID!
  ): Junction
  junctionBySideAIdAndSideBId(sideAId: Int!, sideBId: Int!): Junction

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Parent\` using its globally unique \`ID\`.\\"\\"\\"
  parent(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Parent\`.\\"\\"\\"
    nodeId: ID!
  ): Parent
  parentById(id: Int!): Parent

  \\"\\"\\"Reads a single \`Protected\` using its globally unique \`ID\`.\\"\\"\\"
  protected(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Protected\`.\\"\\"\\"
    nodeId: ID!
  ): Protected
  protectedById(id: Int!): Protected

  \\"\\"\\"Reads and enables pagination through a set of \`Protected\`.\\"\\"\\"
  protectedsByOtherId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
    otherId: Int
  ): ProtectedsConnection!

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!

  \\"\\"\\"Reads a single \`RangeArrayType\` using its globally unique \`ID\`.\\"\\"\\"
  rangeArrayType(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`RangeArrayType\`.
    \\"\\"\\"
    nodeId: ID!
  ): RangeArrayType
  rangeArrayTypeById(id: Int!): RangeArrayType

  \\"\\"\\"Reads a single \`RangeType\` using its globally unique \`ID\`.\\"\\"\\"
  rangeType(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`RangeType\`.\\"\\"\\"
    nodeId: ID!
  ): RangeType
  rangeTypeById(id: Int!): RangeType

  \\"\\"\\"Reads a single \`SideA\` using its globally unique \`ID\`.\\"\\"\\"
  sideA(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`SideA\`.\\"\\"\\"
    nodeId: ID!
  ): SideA
  sideAByAId(aId: Int!): SideA

  \\"\\"\\"Reads a single \`SideB\` using its globally unique \`ID\`.\\"\\"\\"
  sideB(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`SideB\`.\\"\\"\\"
    nodeId: ID!
  ): SideB
  sideBByBId(bId: Int!): SideB

  \\"\\"\\"Reads a single \`Tagg\` using its globally unique \`ID\`.\\"\\"\\"
  tagg(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Tagg\`.\\"\\"\\"
    nodeId: ID!
  ): Tagg
  taggById(id: Int!): Tagg

  \\"\\"\\"Reads a single \`Unfilterable\` using its globally unique \`ID\`.\\"\\"\\"
  unfilterable(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`Unfilterable\`.
    \\"\\"\\"
    nodeId: ID!
  ): Unfilterable
  unfilterableById(id: Int!): Unfilterable

  \\"\\"\\"Reads a single \`UniqueTagg\` using its globally unique \`ID\`.\\"\\"\\"
  uniqueTagg(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`UniqueTagg\`.
    \\"\\"\\"
    nodeId: ID!
  ): UniqueTagg
  uniqueTaggById(id: Int!): UniqueTagg
  uniqueTaggByUniqueTaggableIdAndUniqueTaggableType(uniqueTaggableId: Int!, uniqueTaggableType: String!): UniqueTagg
}

type RangeArrayType implements Node {
  dateRangeArray: [DateRange]
  id: Int!
  int4RangeArray: [IntRange]
  int8RangeArray: [BigIntRange]

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  numericRangeArray: [BigFloatRange]
  timestampRangeArray: [DatetimeRange]
  timestamptzRangeArray: [DatetimeRange]
}

\\"\\"\\"
A condition to be used against \`RangeArrayType\` object types. All fields are
tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input RangeArrayTypeCondition {
  \\"\\"\\"Checks for equality with the object’s \`dateRangeArray\` field.\\"\\"\\"
  dateRangeArray: [DateRangeInput]

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`int4RangeArray\` field.\\"\\"\\"
  int4RangeArray: [IntRangeInput]

  \\"\\"\\"Checks for equality with the object’s \`int8RangeArray\` field.\\"\\"\\"
  int8RangeArray: [BigIntRangeInput]

  \\"\\"\\"Checks for equality with the object’s \`numericRangeArray\` field.\\"\\"\\"
  numericRangeArray: [BigFloatRangeInput]

  \\"\\"\\"Checks for equality with the object’s \`timestampRangeArray\` field.\\"\\"\\"
  timestampRangeArray: [DatetimeRangeInput]

  \\"\\"\\"Checks for equality with the object’s \`timestamptzRangeArray\` field.\\"\\"\\"
  timestamptzRangeArray: [DatetimeRangeInput]
}

\\"\\"\\"A connection to a list of \`RangeArrayType\` values.\\"\\"\\"
type RangeArrayTypesConnection {
  \\"\\"\\"
  A list of edges which contains the \`RangeArrayType\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [RangeArrayTypesEdge!]!

  \\"\\"\\"A list of \`RangeArrayType\` objects.\\"\\"\\"
  nodes: [RangeArrayType]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`RangeArrayType\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`RangeArrayType\` edge in the connection.\\"\\"\\"
type RangeArrayTypesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`RangeArrayType\` at the end of the edge.\\"\\"\\"
  node: RangeArrayType
}

\\"\\"\\"Methods to use when ordering \`RangeArrayType\`.\\"\\"\\"
enum RangeArrayTypesOrderBy {
  DATE_RANGE_ARRAY_ASC
  DATE_RANGE_ARRAY_DESC
  ID_ASC
  ID_DESC
  INT4_RANGE_ARRAY_ASC
  INT4_RANGE_ARRAY_DESC
  INT8_RANGE_ARRAY_ASC
  INT8_RANGE_ARRAY_DESC
  NATURAL
  NUMERIC_RANGE_ARRAY_ASC
  NUMERIC_RANGE_ARRAY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TIMESTAMP_RANGE_ARRAY_ASC
  TIMESTAMP_RANGE_ARRAY_DESC
  TIMESTAMPTZ_RANGE_ARRAY_ASC
  TIMESTAMPTZ_RANGE_ARRAY_DESC
}

type RangeType implements Node {
  dateRange: DateRange
  id: Int!
  int4Range: IntRange
  int8Range: BigIntRange

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  numericRange: BigFloatRange
  timestampRange: DatetimeRange
  timestamptzRange: DatetimeRange
}

\\"\\"\\"
A condition to be used against \`RangeType\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input RangeTypeCondition {
  \\"\\"\\"Checks for equality with the object’s \`dateRange\` field.\\"\\"\\"
  dateRange: DateRangeInput

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`int4Range\` field.\\"\\"\\"
  int4Range: IntRangeInput

  \\"\\"\\"Checks for equality with the object’s \`int8Range\` field.\\"\\"\\"
  int8Range: BigIntRangeInput

  \\"\\"\\"Checks for equality with the object’s \`numericRange\` field.\\"\\"\\"
  numericRange: BigFloatRangeInput

  \\"\\"\\"Checks for equality with the object’s \`timestampRange\` field.\\"\\"\\"
  timestampRange: DatetimeRangeInput

  \\"\\"\\"Checks for equality with the object’s \`timestamptzRange\` field.\\"\\"\\"
  timestamptzRange: DatetimeRangeInput
}

\\"\\"\\"A connection to a list of \`RangeType\` values.\\"\\"\\"
type RangeTypesConnection {
  \\"\\"\\"
  A list of edges which contains the \`RangeType\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [RangeTypesEdge!]!

  \\"\\"\\"A list of \`RangeType\` objects.\\"\\"\\"
  nodes: [RangeType]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`RangeType\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`RangeType\` edge in the connection.\\"\\"\\"
type RangeTypesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`RangeType\` at the end of the edge.\\"\\"\\"
  node: RangeType
}

\\"\\"\\"Methods to use when ordering \`RangeType\`.\\"\\"\\"
enum RangeTypesOrderBy {
  DATE_RANGE_ASC
  DATE_RANGE_DESC
  ID_ASC
  ID_DESC
  INT4_RANGE_ASC
  INT4_RANGE_DESC
  INT8_RANGE_ASC
  INT8_RANGE_DESC
  NATURAL
  NUMERIC_RANGE_ASC
  NUMERIC_RANGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TIMESTAMP_RANGE_ASC
  TIMESTAMP_RANGE_DESC
  TIMESTAMPTZ_RANGE_ASC
  TIMESTAMPTZ_RANGE_DESC
}

type SideA implements Node {
  aId: Int!

  \\"\\"\\"Reads and enables pagination through a set of \`Junction\`.\\"\\"\\"
  junctionsBySideAId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: JunctionCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Junction\`.\\"\\"\\"
    orderBy: [JunctionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionsConnection!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`SideA\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input SideACondition {
  \\"\\"\\"Checks for equality with the object’s \`aId\` field.\\"\\"\\"
  aId: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`SideA\` values.\\"\\"\\"
type SideAsConnection {
  \\"\\"\\"
  A list of edges which contains the \`SideA\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [SideAsEdge!]!

  \\"\\"\\"A list of \`SideA\` objects.\\"\\"\\"
  nodes: [SideA]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`SideA\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`SideA\` edge in the connection.\\"\\"\\"
type SideAsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`SideA\` at the end of the edge.\\"\\"\\"
  node: SideA
}

\\"\\"\\"Methods to use when ordering \`SideA\`.\\"\\"\\"
enum SideAsOrderBy {
  A_ID_ASC
  A_ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SideB implements Node {
  bId: Int!

  \\"\\"\\"Reads and enables pagination through a set of \`Junction\`.\\"\\"\\"
  junctionsBySideBId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: JunctionCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Junction\`.\\"\\"\\"
    orderBy: [JunctionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionsConnection!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`SideB\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input SideBCondition {
  \\"\\"\\"Checks for equality with the object’s \`bId\` field.\\"\\"\\"
  bId: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String
}

\\"\\"\\"A connection to a list of \`SideB\` values.\\"\\"\\"
type SideBsConnection {
  \\"\\"\\"
  A list of edges which contains the \`SideB\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [SideBsEdge!]!

  \\"\\"\\"A list of \`SideB\` objects.\\"\\"\\"
  nodes: [SideB]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`SideB\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`SideB\` edge in the connection.\\"\\"\\"
type SideBsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`SideB\` at the end of the edge.\\"\\"\\"
  node: SideB
}

\\"\\"\\"Methods to use when ordering \`SideB\`.\\"\\"\\"
enum SideBsOrderBy {
  B_ID_ASC
  B_ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Tagg implements Node {
  content: String
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  taggableId: Int!
  taggableType: String!
}

\\"\\"\\"
A condition to be used against \`Tagg\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input TaggCondition {
  \\"\\"\\"Checks for equality with the object’s \`content\` field.\\"\\"\\"
  content: String

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`taggableId\` field.\\"\\"\\"
  taggableId: Int

  \\"\\"\\"Checks for equality with the object’s \`taggableType\` field.\\"\\"\\"
  taggableType: String
}

\\"\\"\\"A connection to a list of \`Tagg\` values.\\"\\"\\"
type TaggsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Tagg\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [TaggsEdge!]!

  \\"\\"\\"A list of \`Tagg\` objects.\\"\\"\\"
  nodes: [Tagg]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Tagg\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Tagg\` edge in the connection.\\"\\"\\"
type TaggsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Tagg\` at the end of the edge.\\"\\"\\"
  node: Tagg
}

\\"\\"\\"Methods to use when ordering \`Tagg\`.\\"\\"\\"
enum TaggsOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAGGABLE_ID_ASC
  TAGGABLE_ID_DESC
  TAGGABLE_TYPE_ASC
  TAGGABLE_TYPE_DESC
}

\\"\\"\\"
The exact time of day, does not include the date. May or may not have a timezone offset.
\\"\\"\\"
scalar Time

type Unfilterable implements Node {
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  text: String
}

\\"\\"\\"A connection to a list of \`Unfilterable\` values.\\"\\"\\"
type UnfilterablesConnection {
  \\"\\"\\"
  A list of edges which contains the \`Unfilterable\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [UnfilterablesEdge!]!

  \\"\\"\\"A list of \`Unfilterable\` objects.\\"\\"\\"
  nodes: [Unfilterable]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Unfilterable\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Unfilterable\` edge in the connection.\\"\\"\\"
type UnfilterablesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Unfilterable\` at the end of the edge.\\"\\"\\"
  node: Unfilterable
}

\\"\\"\\"Methods to use when ordering \`Unfilterable\`.\\"\\"\\"
enum UnfilterablesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEXT_ASC
  TEXT_DESC
}

type UniqueTagg implements Node {
  content: String
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  uniqueTaggableId: Int!
  uniqueTaggableType: String!
}

\\"\\"\\"
A condition to be used against \`UniqueTagg\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input UniqueTaggCondition {
  \\"\\"\\"Checks for equality with the object’s \`content\` field.\\"\\"\\"
  content: String

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`uniqueTaggableId\` field.\\"\\"\\"
  uniqueTaggableId: Int

  \\"\\"\\"Checks for equality with the object’s \`uniqueTaggableType\` field.\\"\\"\\"
  uniqueTaggableType: String
}

\\"\\"\\"A connection to a list of \`UniqueTagg\` values.\\"\\"\\"
type UniqueTaggsConnection {
  \\"\\"\\"
  A list of edges which contains the \`UniqueTagg\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [UniqueTaggsEdge!]!

  \\"\\"\\"A list of \`UniqueTagg\` objects.\\"\\"\\"
  nodes: [UniqueTagg]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`UniqueTagg\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`UniqueTagg\` edge in the connection.\\"\\"\\"
type UniqueTaggsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`UniqueTagg\` at the end of the edge.\\"\\"\\"
  node: UniqueTagg
}

\\"\\"\\"Methods to use when ordering \`UniqueTagg\`.\\"\\"\\"
enum UniqueTaggsOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UNIQUE_TAGGABLE_ID_ASC
  UNIQUE_TAGGABLE_ID_DESC
  UNIQUE_TAGGABLE_TYPE_ASC
  UNIQUE_TAGGABLE_TYPE_DESC
}

\\"\\"\\"
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
\\"\\"\\"
scalar UUID

type ViewTag {
  content: String
  id: Int
  uniqueTaggableId: Int
  uniqueTaggableType: String
}

\\"\\"\\"
A condition to be used against \`ViewTag\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input ViewTagCondition {
  \\"\\"\\"Checks for equality with the object’s \`content\` field.\\"\\"\\"
  content: String

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`uniqueTaggableId\` field.\\"\\"\\"
  uniqueTaggableId: Int

  \\"\\"\\"Checks for equality with the object’s \`uniqueTaggableType\` field.\\"\\"\\"
  uniqueTaggableType: String
}

\\"\\"\\"A connection to a list of \`ViewTag\` values.\\"\\"\\"
type ViewTagsConnection {
  \\"\\"\\"
  A list of edges which contains the \`ViewTag\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ViewTagsEdge!]!

  \\"\\"\\"A list of \`ViewTag\` objects.\\"\\"\\"
  nodes: [ViewTag]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`ViewTag\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`ViewTag\` edge in the connection.\\"\\"\\"
type ViewTagsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`ViewTag\` at the end of the edge.\\"\\"\\"
  node: ViewTag
}

\\"\\"\\"Methods to use when ordering \`ViewTag\`.\\"\\"\\"
enum ViewTagsOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  UNIQUE_TAGGABLE_ID_ASC
  UNIQUE_TAGGABLE_ID_DESC
  UNIQUE_TAGGABLE_TYPE_ASC
  UNIQUE_TAGGABLE_TYPE_DESC
}
"
`;
